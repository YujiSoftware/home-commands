#!/bin/bash
##
## Local port forwarder via sshd without AllowTcpForwarding
## Copyright 2023 (c) SATOH Fumiyasu @ OSSTech Corp., Japan
##
## Requirements:
##   Local: ssh(1), socat(1)
##   Remote: nc(1) or socat(1) or bash(1)
##
## NOTE: Allow socat(1) to bind privileged ports:
##   sudo setcap cap_net_bind_service+ep /usr/bin/socat
##
## References:
##   How to ssh forwarding with AllowTcpForwarding set to no? - Unix & Linux Stack Exchange
##     https://unix.stackexchange.com/questions/406695/how-to-ssh-forwarding-with-allowtcpforwarding-set-to-no
##

set -u

perr() {
  echo "$0: ERROR: $1" 1>&2
}

pdie() {
  perr "$1"
  exit "${2-1}"
}

## ----------------------------------------------------------------------

_cmds_at_exit=()

# shellcheck disable=SC2317
cmds_at_exit() {
  local cmd

  for cmd in "${_cmds_at_exit[@]}"; do
    "$cmd"
  done
}

trap 'cmds_at_exit' EXIT
for signal in HUP INT TERM; do
  trap 'trap - EXIT '$signal'; cmds_at_exit; kill -'$signal' -$$' $signal
done

## ======================================================================

ssh="ssh"

if [[ $# -lt 2 ]]; then
  echo "Usage: $0 LOCAL_PORT:REMOTE_HOST:REMOTE_PORT SSH_ARGUMENTS"
  exit 1
fi

conn="$1"; shift

remote_port="${conn##*:}"
conn="${conn%:*}"
if [[ $remote_port == *[!\-_A-Za-z0-9]* ]]; then
  pdie "Invalid remote port specified: $remote_port"
fi

if [[ $conn == *:\[*\] ]]; then
  ## IPv6 address
  remote_host="${conn##*:\[}"
  remote_host="${remote_host%\]}"
  remote_host_escaped="[$remote_host]"
  conn="${conn%:\[*}"
else
  remote_host="${conn##*:}"
  remote_host_escaped="$remote_host"
  conn="${conn%:*}"
fi
if [[ $remote_host == *[!\-_.:A-Za-z0-9]* ]]; then
  pdie "Invalid remote host specified: $remote_port"
fi

local_port="$conn"
if [[ $local_port == *[!\-_A-Za-z0-9]* ]]; then
  pdie "Invalid local port specified: $local_port"
fi

## FIXME: Support $local_host in argument (localhost by default)
local_host="localhost"

## ======================================================================

cleanup() {
  if [[ -n ${ssh_master_pid-} ]]; then
    kill -TERM "$ssh_master_pid"
    wait "$ssh_master_pid"
  fi
}
_cmds_at_exit+=(cleanup)

ssh_control_path="$HOME/.ssh/${0##*/}-%r@%h:%p"
"$ssh" \
  -T \
  -o ControlMaster=yes \
  -o ControlPersist=no \
  -o ControlPath="$ssh_control_path" \
  "$@" \
  sleep 99999 \
&
ssh_master_pid=$!

# shellcheck disable=SC2207 # Prefer mapfile or read -a to split command output
# shellcheck disable=SC1003 # Want to escape a single quote?
ssh_slave=(
  "$ssh"
  -T
  -o ControlMaster=no
  -o ControlPath="${ssh_control_path}"
  "$@"
  $(
    ## FIXME: Support IPv6 (socat - "tcp6:...")
    printf \''if type nc >/dev/null 2>&1; then exec nc -w 60 %s %s; elif type socat >/dev/null 2>&1; then exec socat - tcp:%s:%s else exec bash -c \'\''"exec 2>/dev/null 3<>/dev/tcp/%s/%s; cat <&3 & cat >&3"; fi\'\'\' \
      "$remote_host" \
      "$remote_port" \
      "$remote_host" \
      "$remote_port" \
      "$remote_host" \
      "$remote_port" \
    ;
  )
)

## FIXME: Support IPv6 (socat "tcp6-listen:..."
socat \
  "tcp-listen:$local_port,bind=$local_host,reuseaddr,fork" \
  "exec:${ssh_slave[*]//:/\\\:}" \
;
