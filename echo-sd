#!/bin/bash
## -*- encoding: utf-8 -*- vim:tabstop=8:shiftwidth=2
##
## ＿人人人人人人＿
## ＞　突然の死　＜ ジェネレーター (Echo "sudden death" message)
## ￣Y^Y^Y^Y^Y^Y￣
## Copyright (C) 2013 SATOH Fumiyasu @ OSS Technology Corp., Japan
##               <https://github.com/fumiyas/home-commands/blob/master/echo-sd>
##               <http://www.OSSTech.co.jp/cgi-bin/echo-sd>
##               <https://twitter.com/satoh_fumiyasu>
##
## License: GNU General Public License version 3
##
## Requirements: bash 4.0, ksh 93u or zsh 4.3
##
## How to install:
##
##   $ mkdir -p $HOME/bin
##   $ cd $HOME/bin
##   $ wget -q https://raw.github.com/fumiyas/home-commands/master/echo-sd
##   $ chmod +x echo-sd
##   $ export PATH="$HOME/bin:$PATH"
##   $ alias echo=echo-sd
##   $ alias banner=echo-sd
##
## Examples for Command-line mode:
##
##   $ echo-sd
##    ＿人人人人人人＿
##   ＞　突然の死　＜
##   ￣Y^Y^Y^Y^Y^Y￣
##   $ echo-sd ぬるぽっ！!
##   ＿人人人人人人人人＿
##   ＞　ぬるぽっ！！　＜
##   ￣Y^Y^Y^Y^Y^YY^^Y￣
##   $ echo-sd -v ガッ！
##   ＿人人＿
##   ＞ ガ ＜
##   ＞ ッ ＜
##   ＞ ！ ＜
##   ￣Y^Y￣
##   $ echo-sd -1 ズキュウウゥン！！
##   ＿人人人人人人人人人人人＿
##   ＞　　　　　　　　　　　＜
##   ＞　ズキュウウゥン！！　＜
##   ＞　　　　　　　　　　　＜
##   ￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣
##   $ echo-sd -v1 「世界」ッ！ 時よ止まれ！
##   ＿人人人人＿
##   ＞　　　　＜
##   ＞ 時　 ┐＜
##   ＞ よ　世 ＜
##   ＞ 止　界 ＜
##   ＞ ま └　＜
##   ＞ れ　ッ ＜
##   ＞ ！　！ ＜
##   ＞　　　　＜
##   ￣Y^Y^Y^Y￣
##   $ echo-sd |echo-sd -r |echo-sd -r
##   ＿人人人人人人人人人人人人人人＿
##   ＞　＿人人人人人人人人人人＿　＜
##   ＞　＞　＿人人人人人人＿　＜　＜
##   ＞　＞　＞　突然の死　＜　＜　＜
##   ＞　＞　￣Y^Y^Y^Y^Y^Y￣ 　＜　＜
##   ＞　￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣ 　＜
##   ￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣
##
## Examples for CGI mode:
##
##   $ GATEWAY_INTERFACE=CGI/1.0 QUERY_STRING=s=おっす！\&o=v echo-sd
##   Content-Type: text/html; charset=UTF-8
##   ...
##   <pre>
##   ＿人人＿
##   ＞ お ＜
##   ＞ っ ＜
##   ＞ す ＜
##   ＞ ！ ＜
##   ￣Y^Y￣
##   </pre><hr>
##   ...
##
## On-line demo site:
##
##   http://www.OSSTech.co.jp/cgi-bin/echo-sd
##
## TODO:
##
##   * Nothing
##
## Inspired by:
##
##   * 突然の死ジェネレータ - powered by starwing.net, created by @karno.
##     http://starwing.net/suddenly_death.html
##   * 突然の死ジェネレータ - 純粋関数空間
##     http://tanakh.jp/tools/sudden.html
##   * 元ネタ
##     http://dic.nicovideo.jp/a/%E7%AA%81%E7%84%B6%E3%81%AE%E6%AD%BB
##

set -u

typeset SD_copyright='(C) 2013 SATOH Fumiyasu @ OSS Technology Corp., Japan'
typeset SD_url='https://github.com/fumiyas/home-commands/blob/master/echo-sd'
typeset SD_lang_orig SD_lang
typeset SD_c_tl SD_c_t SD_c_tr
typeset SD_c_l SD_c_r
typeset SD_c_bl SD_c_b SD_c_br
typeset -A SD_v_map

SD_die() {
  echo "$0: ERROR: $1" 1>&2
  SD_echo_command 1>&2
  exit ${2-1}
}

function _SD_init {
  if [[ -n ${ZSH_VERSION-} ]]; then
    setopt KSH_GLOB
    setopt KSH_ARRAYS
  fi

  typeset lang_ja lang

  SD_lang_orig="${LANG-}"
  if [[ ${SD_lang_orig#*.} != @(UTF-8|utf-8|UTF8|utf8) ]]; then
    if type SD_locale >/dev/null 2>&1; then
      while read -r SD_locale; do
	if [[ ${SD_locale#*.} == @(UTF-8|utf-8|UTF8|utf8) ]]; then
	  if [[ ${SD_locale%.*} == ja_JP ]]; then
	    lang_ja="$SD_locale"
	  else
	    lang="$SD_locale"
	  fi
	fi
      done < <(locale -a)
    fi
  fi
  SD_lang="${lang_ja-${lang-ja_JP.UTF-8}}"

  SD_c_tl="＿人"
  SD_c_t="人"
  SD_c_tr="人＿"
  SD_c_l="＞"
  SD_c_r="＜"
  SD_c_bl="￣Y^"
  SD_c_b="Y^"
  SD_c_br="Y￣"

  if [[ -n ${ZSH_VERSION-} ]]; then
    SD_v_map=()
  else
    SD_v_map=
  fi
  SD_v_map[。]='  。'
  SD_v_map[、]='  、'
  SD_v_map[ー]=' ｜ '
  SD_v_map[…]=' ︙ '
  SD_v_map[‥]=' ︰ '
  SD_v_map[（]=' ⏜  '
  SD_v_map[\(]=' ⏜  '
  SD_v_map[）]=' ⏝  '
  SD_v_map[\)]=' ⏝  '
  SD_v_map[［]=' ⎴  '
  SD_v_map[\[]=' ⎴  '
  SD_v_map[］]=' ⎵  '
  SD_v_map[\]]=' ⎵  '
  SD_v_map[｛]=' ⏞  '
  SD_v_map[\{]=' ⏞  '
  SD_v_map[｝]=' ⏟  '
  SD_v_map[\}]=' ⏟  '
  SD_v_map[「]='  ┐'
  SD_v_map[」]='└  '
  SD_v_map[｢]='  ┐'
  SD_v_map[｣]='└  '
  SD_v_map[-]=' |  '
  SD_v_map[ｰ]=' |  '
  SD_v_map[,]="  ' "
  SD_v_map[､]='  ` '
}

function _SD_fill_string_by_char {
  typeset str char
  str="$1"; shift
  char="$1"; shift

  ## Why bash on ja_JP.UTF-8 locale matches '[¥]' with '︙' (and others?)
  #str="${str//[ -~｡-ﾟ¢£¥¦¬¯]/$char}"
  str="${str//[ -~｡-ﾟ¢£¦¬¯]/$char}"
  str="${str//¥/$char}"
  str="${str//[! ]/$char$char}"

  echo "$str"
}

function _SD_pad_space {
  printf "%${1}s" ''
}

function _SD_string_width {
  typeset str
  str=$(_SD_fill_string_by_char "$1" ' ')

  echo "${#str}"
}

function _SD_echo_with_padding
{
  typeset str width
  str="$1"; shift
  width="$1"; shift

  echo "${str}$(_SD_pad_space "$((width-$(_SD_string_width "${1-$str}")))")"
}

function SD_echo_horizontal {
  export LANG="$SD_lang"

  typeset script width width_tmp
  width=0
  for script in ${1+"$@"}; do
    width_tmp=$(_SD_string_width "$script")
    if [[ $width_tmp -gt $width ]]; then
      width="$width_tmp"
    fi
  done

  typeset template header footer
  template=$(_SD_pad_space "$width")
  header="${SD_c_tl}${template//  /${SD_c_t}}${SD_c_tr}"
  footer="${SD_c_bl}${template//  /${SD_c_b}}${SD_c_br}"

  echo "${header/ /}"
  typeset line
  for script in ${1+"$@"}; do
    line="${SD_c_l}　$(_SD_echo_with_padding "${script}" "$width")　${SD_c_r}"
    echo "${line//  /　}"
  done
  echo "${footer/ /}"

  export LANG="$SD_lang_orig"
}

function SD_echo_vertical {
  export LANG="$SD_lang"
  typeset script script_n trailer trailer2 letter letter_width next
  typeset line line_n pad_n
  typeset -a lines

  letter_width=4

  script_n=0
  for script in ${1+"$@"}; do
    line_n=0
    trailer="$script"

    while [[ -n $script ]]; do
      trailer="${trailer#?}"
      letter="${script%$trailer}"
      script="${script#?}"
      if [[ -n ${SD_v_map[$letter]-} ]]; then
	line="${SD_v_map[$letter]}"
      else
	trailer2="${trailer#?}"
	next="${script%$trailer2}"
	if [[ $next == @(ﾞ|ﾟ) ]] || [[ $letter$next == @([\?!][\?!]) ]]; then
	  line=" $letter$next "
	  trailer="$trailer2"
	  script="${script#?}"
	else
	  line=" ${letter} "
	fi
      fi

      if [[ -z ${lines[$line_n]-} ]]; then
	lines[$line_n]="$(_SD_pad_space $((script_n * $letter_width)))"
      fi
      lines[$line_n]="$(_SD_echo_with_padding "${line}" $letter_width)${lines[$line_n]}"
      let line_n+=1
    done

    while [[ $line_n -lt ${#lines[@]} ]]; do
      lines[$line_n]="$(_SD_pad_space $letter_width)${lines[$line_n]}"
      let line_n+=1
    done

    let script_n+=1
  done

  typeset template header footer
  template=$(_SD_pad_space $(((script_n - 1) * $letter_width)))
  header="${SD_c_tl}${template//  /${SD_c_t}}${SD_c_tr}"
  footer="${SD_c_bl}${template//  /${SD_c_b}}${SD_c_br}"

  echo "${header/ /}"
  for line in ${lines[@]+"${lines[@]}"}; do
    echo "${SD_c_l}${line//  /　}${SD_c_r}"
  done
  echo "${footer/ /}"

  export LANG="$SD_lang_orig"
}

function SD_echo_command
{
  typeset opt read_stdin vmargin vertical

  while [ "$#" -gt 0 ]; do
    opt="$1"; shift

    if [[ -z "${opt##-[!-]?*}" ]]; then
      set -- "-${opt#??}" ${1+"$@"}
      opt="${opt%${1#-}}"
    fi
    if [[ -z "${opt##--*=*}" ]]; then
      set -- "${opt#--*=}" ${1+"$@"}
      opt="${opt%%=*}"
    fi

    case "$opt" in
    -h|--help)
      echo "Usage: echo-sd [-v] [script]"
      exit 0
      ;;
    -r|--read-stdin)
      read_stdin="set"
      ;;
    -1|--vmargin)
      vmargin="set"
      ;;
    -v|--vertical)
      vertical="set"
      ;;
    --)
      break
      ;;
    -*)
      SD_die "Invalid option: $opt"
      ;;
    *)
      set -- "$opt" ${1+"$@"}
      break
      ;;
    esac
  done

  if [[ -n ${read_stdin-} ]]; then
    while IFS= read -r line; do
      set -- ${1+"$@"} "$line"
    done
  fi

  if [[ $# -eq 0 ]]; then
    set -- '突然の死'
  fi

  if [[ -z ${vertical-} ]]; then
    if [[ -n ${vmargin-} ]]; then
      set -- '' "$@" ''
    fi
    SD_echo_horizontal ${1+"$@"}
  else
    if [[ -n ${vmargin-} ]]; then
      typeset arg
      typeset -a args
      for arg in "$@"; do
	args[${#args[@]}]=" $arg "
      done
      set -- ${args[@]+"${args[@]}"}
    fi
    SD_echo_vertical ${1+"$@"}
  fi
}

function _SD_escape_html
{
  if [[ -n ${1+set} ]]; then
    echo "$1"
  else
    cat
  fi \
  |sed \
    -e 's/&/\&amp;/g;' \
    -e 's/</\&lt;/g;' \
    -e 's/>/\&gt;/g;' \
    ;
}

function _SD_urldecode
{
  ## FIXME: Support ksh
  echo -e "$(echo "$1" |sed 's/+/ /g;s/%\(..\)/\\x\1/g;')"
}

function SD_echo_cgi
{
  typeset query="${QUERY_STRING-}"
  typeset param value
  typeset text vmargin vertical
  typeset -a prefaces
  typeset -a scripts

  while [[ -n $query ]]; do
    param="${query%%&*}"
    name="$(_SD_urldecode "${param%%=*}")"
    value="$(_SD_urldecode "${param#*=}")"

    case "$name" in
    o|options)
      case "$value" in
      text)
	text="checked"
	;;
      1|vmargin)
	vmargin="checked"
	;;
      v|vertical)
	vertical="checked"
	;;
      esac
      ;;
    p|prefaces)
      while IFS= read -r line; do
	prefaces[${#prefaces[@]}]="${line%}"
      done < <(echo "$value")
      ;;
    s|scripts)
      while IFS= read -r line; do
	scripts[${#scripts[@]}]="${line%}"
      done < <(echo "$value")
      ;;
    esac

    if [[ -n ${query##*&*} ]]; then
      break
    fi
    query="${query#*&}"
  done

  set -- \
    ${vmargin:+-1} \
    ${vertical:+-v} \
    -- \
    ;
  if [[ ${#scripts[@]} -eq 1 ]] && [[ -z ${scripts[0]} ]]; then
    set -- ${1+"$@"} '突然の死'
  else
    set -- ${1+"$@"} ${scripts[@]+"${scripts[@]}"}
  fi

  if [[ -n ${text-} ]]; then
    echo 'Content-Type: text/plain; charset=UTF-8'
    echo
    for preface in ${prefaces[@]+"${prefaces[@]}"}; do
      echo "$preface"
    done
    SD_echo_command "$@"
  else
    echo 'Content-Type: text/html; charset=UTF-8'
    echo
    echo \
      '<html>' \
      '<head><title>＞　突然の死　＜ ジェネレーター</title></head>' \
      '<style type="text/css"><!--' \
      '.ul { text-decoration:underline; }' \
      '--></style>' \
      '<body><h1>＞　突然の死　＜ ジェネレーター</h1>' \
      '<form action="./echo-sd" method="GET">' \
      ;
    echo -n '<textarea name="scripts" cols="80" rows="4" tabindex="1">'
    for script in ${scripts[@]+"${scripts[@]}"}; do
      _SD_escape_html "$script"
    done
    echo '</textarea><br>'
    echo '<label>' \
      '<input type="checkbox" name="options" value="vmargin" accesskey="1" ' \
      "${vmargin-}>上下空白(<span class='ul'>1</span>)</label>"
    echo '<label>' \
      '<input type="checkbox" name="options" value="vertical" accesskey="v" ' \
      "${vertical-}>縦書き(<span class='ul'>V</span>)</label>"
    echo '<label>' \
      '<input type="checkbox" name="options" value="text" accesskey="t" ' \
      ">テキスト(<span class='ul'>T</span>)</label>"
    echo '<br>'
    echo '<input type='submit' value='＞　ジェネレート　＜' tabindex="2"><br>'
    echo '</form>'
    echo '<!--'
    echo "[$(_SD_escape_html "$*")]"
    echo '-->'
    echo '<pre>'
    for preface in ${prefaces[@]+"${prefaces[@]}"}; do
      _SD_escape_html "$preface"
    done
    SD_echo_command "$@" |_SD_escape_html
    echo '</pre><hr>'
    _SD_escape_html "$SD_copyright"
    echo '<br>'
    echo "<a href='$(_SD_escape_html "$SD_url")'>$(_SD_escape_html "$SD_url")</a>"
    echo '<br>'
    echo "${SD_CGI_FOOTER_HTML-}"
    echo '</body></html>'
  fi
}

_SD_init

if [[ ${zsh_eval_context-toplevel} == toplevel ]] && [[ ${0##*/} == echo-sd ]]; then
  if [[ ${GATEWAY_INTERFACE-} == @(CGI*) ]]; then
    SD_echo_cgi "$@"
  else
    SD_echo_command "$@"
  fi
  exit $?
fi

return 0

