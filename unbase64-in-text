#!/usr/bin/env python3
##
## unbase64-in-text: Decode text in Base64 data in text from stdin
## Copyright (c) 2023 SATOH Fumiyasu @ OSSTech Corp., Japan
##
## License: GNU General Public License version 3
##

import sys
import re
import base64

B64_RE_STR = r'(?P<b64>([0-9A-Za-z+/]{4})*([0-9A-Za-z+/]{4}|[0-9A-Za-z+/]{3}=|[0-9A-Za-z+/]{2}==|[0-9A-Za-z+/]{4}=)?)'

B64_LINE_FIRST_LEN_MIN = 76
B64_LINE_RE = re.compile(r'^' + B64_RE_STR + r'$')

B64_MIME_RE = re.compile(r'=\?(?P<encoding>[0-9A-Za-z]+([-_.]?[0-9A-Za-z]+)+)\?[Bb]\?' + B64_RE_STR + r'\?=')


def unbase64_mime(match):
    return base64.b64decode(match.group('b64')).decode(match.group('encoding'))


def main(f):
    line_prev = ''
    b64_chunk = ''

    for line in f:
        if B64_LINE_RE.search(line) and (len(b64_chunk) > 0 or len(line) >= B64_LINE_FIRST_LEN_MIN):
            b64_chunk += line
            continue
        if len(b64_chunk):
            try:
                print(base64.b64decode(b64_chunk).decode('UTF-8'), end='')
            except UnicodeDecodeError:
                print(b64_chunk)
            b64_chunk = ''

        line = B64_MIME_RE.sub(unbase64_mime, line)

        print(line, end='')

    if len(b64_chunk):
        print(b64_chunk.decode('UTF-8'), end='')


if __name__ == '__main__':
    main(sys.stdin)
